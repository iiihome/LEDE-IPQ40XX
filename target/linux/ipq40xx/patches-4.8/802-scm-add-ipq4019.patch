--- a/drivers/firmware/qcom_scm.c	2016-11-17 20:28:44.574596195 +0100
+++ b/drivers/firmware/qcom_scm.c	2016-11-17 20:48:49.926814769 +0100
@@ -39,33 +39,44 @@ static int qcom_scm_clk_enable(void)
 {
 	int ret;
 
-	ret = clk_prepare_enable(__scm->core_clk);
-	if (ret)
-		goto bail;
+	if (__scm->core_clk) {
+		ret = clk_prepare_enable(__scm->core_clk);
+		if (ret)
+			goto bail;
+	}
 
-	ret = clk_prepare_enable(__scm->iface_clk);
-	if (ret)
-		goto disable_core;
+	if (__scm->iface_clk) {
+		ret = clk_prepare_enable(__scm->iface_clk);
+		if (ret)
+			goto disable_core;
+	}
 
-	ret = clk_prepare_enable(__scm->bus_clk);
-	if (ret)
-		goto disable_iface;
+	if (__scm->bus_clk) {
+		ret = clk_prepare_enable(__scm->bus_clk);
+		if (ret)
+			goto disable_iface;
+	}
 
 	return 0;
 
 disable_iface:
-	clk_disable_unprepare(__scm->iface_clk);
+	if (__scm->iface_clk)
+		clk_disable_unprepare(__scm->iface_clk);
 disable_core:
-	clk_disable_unprepare(__scm->core_clk);
+	if (__scm->core_clk)
+		clk_disable_unprepare(__scm->core_clk);
 bail:
 	return ret;
 }
 
 static void qcom_scm_clk_disable(void)
 {
-	clk_disable_unprepare(__scm->core_clk);
-	clk_disable_unprepare(__scm->iface_clk);
-	clk_disable_unprepare(__scm->bus_clk);
+	if (__scm->core_clk)
+		clk_disable_unprepare(__scm->core_clk);
+	if (__scm->iface_clk)
+		clk_disable_unprepare(__scm->iface_clk);
+	if (__scm->bus_clk)
+		clk_disable_unprepare(__scm->bus_clk);
 }
 
 /**
@@ -317,14 +317,10 @@ bool qcom_scm_is_available(void)
 }
 EXPORT_SYMBOL(qcom_scm_is_available);
 
-static int qcom_scm_probe(struct platform_device *pdev)
-{
-	struct qcom_scm *scm;
-	int ret;
+static int qcom_scm_config_clocks_and_reset(struct platform_device *pdev,
+					    struct qcom_scm *scm)
 
-	scm = devm_kzalloc(&pdev->dev, sizeof(*scm), GFP_KERNEL);
-	if (!scm)
-		return -ENOMEM;
+{
 
 	scm->core_clk = devm_clk_get(&pdev->dev, "core");
 	if (IS_ERR(scm->core_clk)) {
@@ -356,9 +352,23 @@ static int qcom_scm_probe(struct platfor
 	reset_controller_register(&scm->reset);
 
 	/* vote for max clk rate for highest performance */
-	ret = clk_set_rate(scm->core_clk, INT_MAX);
-	if (ret)
-		return ret;
+	return clk_set_rate(scm->core_clk, INT_MAX);
+}
+
+static int qcom_scm_probe(struct platform_device *pdev)
+{
+	struct qcom_scm *scm;
+	int ret;
+
+	scm = devm_kzalloc(&pdev->dev, sizeof(*scm), GFP_KERNEL);
+	if (!scm)
+		return -ENOMEM;
+
+	if (!of_device_is_compatible(pdev->dev.of_node, "qcom,scm-ipq4019")) {
+		ret = qcom_scm_config_clocks_and_reset(pdev, scm);
+		if (ret)
+			return ret;
+	}
 
 	__scm = scm;
 	__scm->dev = &pdev->dev;
@@ -387,6 +404,7 @@ static const struct of_device_id qcom_sc
 	{ .compatible = "qcom,scm-apq8064",},
 	{ .compatible = "qcom,scm-msm8660",},
 	{ .compatible = "qcom,scm-msm8960",},
+	{ .compatible = "qcom,scm-ipq4019",},
 	{ .compatible = "qcom,scm",},
 	{}
 };
